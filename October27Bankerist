<template>
  <div id="app">
    <!-- TOP NAVIGATION -->
    <div v-if="!currentAccount" class="nav">
      <p class="welcome">{{ welcomeMessage }}</p>
      <img src="" alt="Logo" class="logo" />
      <form class="login" @submit.prevent="handleLogin">
        <input type="text" placeholder="User" maxlength="2" v-model="loginUser" class="login__input" />
        <input type="password" placeholder="PIN" maxlength="4" v-model="loginPin" class="login__input" />
        <button class="login__btn">→</button>
      </form>
    </div>

    <!-- MAIN APP AREA -->
    <main v-if="currentAccount" class="app">
      <!-- BALANCE SECTION -->
      <section class="balance">
        <p class="welcome">{{ welcomeMessage }}</p>
        <p class="balance__label">Current balance</p>
        <p class="balance__date">As of {{ formattedDate }}</p>
        <p class="balance__value">{{ formattedBalance }}</p>
      </section>

      <!-- MOVEMENTS SECTION -->
      <div class="movements">
        <div v-for="(mov, index) in sortedMovements" :key="index" class="movements__row">
          <div :class="['movements__type', movementType(mov)]">
            {{ index + 1 }} {{ movementType(mov).split('--')[1] }}
          </div>
          <div class="movements__date">{{ formatMovementDate(account.movementsDates[index]) }}</div>
          <div class="movements__value">{{ formatCurrency(mov) }}</div>
        </div>
      </div>

      <!-- OPERATIONS SECTION -->
      <section class="operations">
        <div class="operation operation--transfer">
          <h2>Transfer Money</h2>
          <form @submit.prevent="transferMoney">
            <input type="text" v-model="transferTo" placeholder="Transfer to" class="form__input" />
            <input type="number" v-model.number="transferAmount" placeholder="Amount" class="form__input" />
            <button class="form__btn">→</button>
          </form>
        </div>

        <div class="operation operation--loan">
          <h2>Request Loan</h2>
          <form @submit.prevent="requestLoan">
            <input type="number" v-model.number="loanAmount" placeholder="Amount" class="form__input" />
            <button class="form__btn">→</button>
          </form>
        </div>

        <div class="operation operation--close">
          <h2>Close Account</h2>
          <form @submit.prevent="closeAccount">
            <input type="text" v-model="closeUser" placeholder="Confirm User" class="form__input" />
            <input type="password" v-model="closePin" maxlength="4" placeholder="Confirm PIN" class="form__input" />
            <button class="form__btn">→</button>
          </form>
        </div>
      </section>

      <!-- SUMMARY SECTION -->
      <div class="summary">
        <p class="summary__label">In: {{ formattedIncome }}</p>
        <p class="summary__label">Out: {{ formattedOut }}</p>
        <p class="summary__label">Interest: {{ formattedInterest }}</p>
        <button class="btn--sort" @click="sortMovements">↓ SORT</button>
      </div>

      <!-- LOGOUT TIMER -->
      <p class="logout-timer">You will be logged out in <span class="timer">{{ formattedTimer }}</span></p>
    </main>
  </div>
</template>

<script>
export default {
  name: 'Bankerist',
  data() {
    return {
      loginUser: '',
      loginPin: '',
      currentAccount: null,
      isSorted: false,
      timer: null,
      timeRemaining: 300,
      transferTo: '',
      transferAmount: 0,
      loanAmount: 0,
      closeUser: '',
      closePin: '',
      accounts: [
        {
          owner: 'Ahmad Ouabed',
          movements: [200, 455.23, -306.5, 25000, -642.21, -133.9, 79.97, 1300],
          interestRate: 1.2,
          pin: 1234,
          movementsDates: [
            '2019-11-18T21:31:17.178Z',
            '2019-12-23T07:42:02.383Z',
            '2020-01-28T09:15:04.904Z',
            '2020-04-01T10:17:24.185Z',
            '2020-05-08T14:11:59.604Z',
            '2022-12-01T17:01:17.194Z',
            '2022-12-06T23:36:17.929Z',
            '2022-12-08T10:51:36.790Z'
          ],
          currency: 'EUR',
          locale: 'pt-PT'
        },
        {
          owner: 'Admin Test',
          movements: [2500, 400, -260, 830, -4210, 2200, 4600, -70],
          interestRate: 1.8,
          pin: 1111,
          movementsDates: [
            '2019-11-03T13:15:33.035Z',
            '2019-11-25T09:48:16.867Z',
            '2019-12-16T06:04:23.907Z',
            '2020-01-12T14:18:46.235Z',
            '2020-02-25T16:33:06.386Z',
            '2020-04-11T14:43:26.374Z',
            '2020-06-15T18:49:59.371Z',
            '2020-07-30T12:01:20.894Z'
          ],
          currency: 'USD',
          locale: 'en-US'
        }
      ]
    }
  },
  computed: {
    welcomeMessage() {
      return this.currentAccount
        ? `Welcome back, ${this.currentAccount.owner.split(' ')[0]}!`
        : 'Log in to get started'
    },
    account() {
      return this.currentAccount
    },
    formattedBalance() {
      if (!this.account) return '0€'
      const balance = this.account.movements.reduce((acc, mov) => acc + mov, 0)
      return this.formatCurrency(balance)
    },
    sortedMovements() {
      const movs = this.account.movements.slice()
      return this.isSorted ? movs.sort((a, b) => a - b) : movs
    },
    formattedIncome() {
      const incomes = this.account.movements
        .filter((mov) => mov > 0)
        .reduce((acc, mov) => acc + mov, 0)
      return this.formatCurrency(incomes)
    },
    formattedOut() {
      const out = this.account.movements.filter((mov) => mov < 0).reduce((acc, mov) => acc + mov, 0)
      return this.formatCurrency(Math.abs(out))
    },
    formattedInterest() {
      const interest = this.account.movements
        .filter((mov) => mov > 0)
        .map((deposit) => (deposit * this.account.interestRate) / 100)
        .reduce((acc, int) => acc + int, 0)
      return this.formatCurrency(interest)
    },
    formattedDate() {
      const now = new Date()
      return new Intl.DateTimeFormat(this.account.locale, {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      }).format(now)
    },
    formattedTimer() {
      const min = String(Math.floor(this.timeRemaining / 60)).padStart(2, '0')
      const sec = String(this.timeRemaining % 60).padStart(2, '0')
      return `${min}:${sec}`
    },
    currentBalance() {
      return this.currentAccount.movements.reduce((acc, mov) => acc + mov, 0)
    }
  },
  methods: {
    handleLogin() {
      const account = this.accounts.find(
        (acc) =>
          acc.owner
            .toLowerCase()
            .split(' ')
            .map((name) => name[0])
            .join('') === this.loginUser
      )
      if (account?.pin === +this.loginPin) {
        this.currentAccount = account
        this.startLogOutTimer()
      } else {
        alert('Invalid login credentials')
      }
    },
    movementType(movement) {
      return movement > 0 ? 'movements__type--deposit' : 'movements__type--withdrawal'
    },

    formatMovementDate(dateString) {
      const date = new Date(dateString)
      const daysPassed = Math.floor((new Date() - date) / (1000 * 60 * 60 * 24))
      if (daysPassed === 0) return 'Today'
      if (daysPassed === 1) return 'Yesterday'
      return daysPassed <= 7
        ? `${daysPassed} days ago`
        : new Intl.DateTimeFormat(this.account.locale).format(date)
    },
    formatCurrency(value) {
      return new Intl.NumberFormat(this.account.locale, {
        style: 'currency',
        currency: this.account.currency
      }).format(value)
    },
    sortMovements() {
      this.isSorted = !this.isSorted
    },
    startLogOutTimer() {
      if (this.timer) clearInterval(this.timer)
      this.timeRemaining = 300
      this.timer = setInterval(() => {
        this.timeRemaining--
        if (this.timeRemaining === 0) {
          clearInterval(this.timer)
          this.currentAccount = null
        }
      }, 1000)
    },
    transferMoney() {
      const receiverAcc = this.accounts.find(
        (acc) =>
          acc.owner
            .toLowerCase()
            .split(' ')
            .map((name) => name[0])
            .join('') === this.transferTo
      )

      // Ensure both the recipient exists and the user has enough balance
      if (
        receiverAcc &&
        this.transferAmount > 0 &&
        this.currentBalance >= this.transferAmount && // using computed balance here
        receiverAcc !== this.currentAccount // prevent transferring to self
      ) {
        this.currentAccount.movements.push(-this.transferAmount)
        receiverAcc.movements.push(this.transferAmount)
        this.currentAccount.movementsDates.push(new Date().toISOString())
        receiverAcc.movementsDates.push(new Date().toISOString())
        this.transferAmount = 0
        this.transferTo = ''
        this.updateUI()
        alert('Transfer successful')
      } else {
        alert('Invalid transfer details, Please Input Correct Username')
      }
    },
    requestLoan() {
      if (
        this.loanAmount > 0 &&
        this.currentAccount.movements.some((mov) => mov >= (this.loanAmount * 10) / 100)
      ) {
        setTimeout(() => {
          this.currentAccount.movements.push(this.loanAmount)
          this.currentAccount.movementsDates.push(new Date().toISOString())
          this.loanAmount = 0
          this.updateUI()
          alert('Loan approved')
        }, 2000)
      } else {
        alert('Loan request denied')
      }
    },
    closeAccount() {
      if (this.closeUser === this.loginUser && +this.closePin === this.currentAccount.pin) {
        const index = this.accounts.findIndex(
          (acc) => acc.username === this.currentAccount.username
        )
        this.accounts.splice(index, 1)
        this.currentAccount = null
        this.loginUser = ''
        this.loginPin = ''
        alert('Account closed')
      } else {
        alert('Incorrect details')
      }
    },
    updateUI() {
      this.$forceUpdate() // Forces the UI to re-render after updates
    }
  }
}
</script>

<style scoped>
/* General Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: 'Poppins', sans-serif;
  background-color: #f3f3f3;
  color: #444;
  min-height: 100vh;
}

/* Layout Styling */
.app {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  max-width: 100rem;
  margin: auto;
  padding: 1rem;
}

.nav {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.balance {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

/* Movements */
.movements {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.movements__row {
  display: flex;
  flex-direction: column;
  padding: 1rem;
  border-bottom: 1px solid #eee;
}

/* Operations */
.operations {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.operation {
  padding: 1rem;
  border-radius: 8px;
}

.operation--transfer { background: #f0f8ff; }
.operation--loan { background: #f8f0ff; }
.operation--close { background: #fff8f0; }

/* Buttons and Inputs */
.form__input {
  padding: 0.5rem;
  margin: 0.5rem 0;
  width: 100%;
  border-radius: 8px;
}

.form__btn {
  padding: 0.5rem;
  width: 100%;
  cursor: pointer;
}

.btn--sort {
  margin-top: 1rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  html { font-size: 55%; }
  
  .app, .balance, .operations, .summary, .movements__row {
    flex-direction: column;
    align-items: center;
  }

  .summary { gap: 1rem; }
}

@media (max-width: 440px) {
  .movements__row { padding: 1rem; flex-direction: column; align-items: center; }
  .form__input, .form__btn { width: 100%; }
}
</style>
