<template>
  <div>
    <div v-if="!isLoggedIn" class="d-flex align-items-center justify-content-center app">
      <b-container class="w-auto">
        <b-card v-if="showLoginForm" header="Sign In">
          <b-card-text>
            <sign-in-view @login-success="updateLoginStatus(true, $event)"></sign-in-view>
          </b-card-text>
          <div class="mt-3">
            <span>
              Don't have an account?
              <span class="clickable" @click="showLoginForm = false">Sign up here</span>
            </span>
          </div>
        </b-card>
        <b-card header="Sign Up" v-else>
          <b-card-text>
            <sign-up-view></sign-up-view>
          </b-card-text>
          <div class="mt-3">
            <span v-if="!isLoggedIn">
              Already have an account?
              <span class="clickable" @click="showLoginForm = true">Sign in here</span>
            </span>
          </div>
        </b-card>
      </b-container>
    </div>
    <div v-else>
      <b-navbar toggleable="lg" type="dark" variant="success" sticky="top" class="p-3">
        <b-navbar-toggle target="navbar-toggle-collapse" variant="light">
          <i class="bi bi-list text-light"></i>
        </b-navbar-toggle>
        <b-collapse id="navbar-toggle-collapse" class="flex-grow-0 flex-wrap pl-5" is-nav>
          <b-navbar-brand
            ><h1 class="fw-bold text-light">{{ logo }}</h1></b-navbar-brand
          >
          <b-navbar-nav v-for="item in items" :key="item.id" class="ml-auto">
            <component :is="item.componentName" :key="item.id" :input="item"></component>
          </b-navbar-nav>
        </b-collapse>
        <b-nav-item-dropdown class="text-light list fs-4" right>
          <template #button-content>
            <i class="bi bi-person-circle mx-2"></i>
            <em>{{ username }}</em>
          </template>
          <b-dropdown-item :disabled="true">
            <span>{{ userEmail }}</span>
          </b-dropdown-item>
          <b-dropdown-item @click="changePassword">Change Password</b-dropdown-item>
          <b-dropdown-item @click="deleteAccount">Delete Account</b-dropdown-item>
          <b-dropdown-item @click="signOut">Sign Out</b-dropdown-item>
        </b-nav-item-dropdown>
      </b-navbar>
      <router-view></router-view>
    </div>
  </div>
</template>

<script>
import HomeView from '@/components/pages/HomeView.vue'
import MonsterSlayer from '@/components/pages/MonsterSlayer/MonsterSlayer.vue'
import SlamBook from '@/components/pages/Slambook/SlamBook.vue'
import CommonNavbar from '@/components/common/CommonNavbarLink.vue'
import { NAVBARLINK_PROPERTIES } from '@/common/recipe/rNavbarLink'
import SignInView from '@/components/pages/SignInView.vue'
import SignUpView from '@/components/pages/SignUpView.vue'

export default {
  name: 'app',
  components: { HomeView, MonsterSlayer, SlamBook, CommonNavbar, SignInView, SignUpView },
  data() {
    return {
      items: [...NAVBARLINK_PROPERTIES],
      logo: 'Rapplication',
      isLoggedIn: false,
      showLoginForm: true,
      username: '',
      logIn: localStorage.getItem('logIn') === 'true'
    }
  },
  methods: {
    /**
     * Function use for updating the pages information
     * @param {Boolean} status - used for hiding the login page
     * @param {String} username - the username of the user
     */
    updateLoginStatus(status, username) {
      this.isLoggedIn = status
      if (username) {
        this.username = username
        this.fetchUserEmail()
      }
    },
    /**
     * Function use for getting the email of the current user
     */
    fetchUserEmail() {
      const user = JSON.parse(localStorage.getItem(this.username))
      if (user) {
        this.userEmail = user.email || ''
      }
    },
    /**
     * Function use for deleting the current user account
     */
    deleteAccount() {
      if (confirm('Are you sure you want to delete your account?')) {
        localStorage.removeItem(this.username)
        this.isLoggedIn = false
      }
    },
    /**
     * Function use for log out
     */
    signOut() {
      this.isLoggedIn = false
    },
    /**
     * Function use for changing the password of the current user
     */
    changePassword() {
      const user = JSON.parse(localStorage.getItem(this.username))

      if (user) {
        const email = prompt('Enter your email address:')
        if (email === user.email) {
          const newPassword = prompt('Enter new password:')
          if (newPassword) {
            user.password = newPassword
            localStorage.setItem(this.username, JSON.stringify(user))
            alert('Password updated successfully!')
          } else {
            alert('Password update failed. Please try again.')
          }
        } else {
          alert('Email does not match the registered email.')
        }
      } else {
        alert('User not found!')
      }
    }
  }
}
</script>

<style scoped>
.app {
  height: 100vh;
}
.navbar-toggler {
  border: none;
}

.navbar-toggler {
  box-shadow: none !important;
}

i {
  font-size: 35px;
}

.list {
  list-style: none;
}

.clickable {
  cursor: pointer; /* Ensure the cursor is a pointer on hover */
  text-decoration: underline;
  color: #007bff; /* Blue color for the clickable text */
  display: inline-block;
}
.clickable:hover {
  color: #0056b3;
}
</style>
----------------
<template>
  <b-form @submit.prevent="registerUser">
    <b-form-group label="Username:" label-for="username" class="mb-3">
      <b-form-input
        id="username"
        v-model="username"
        type="text"
        required
        placeholder="Enter a username"
        maxlength="10"
      ></b-form-input>
      <b-form-text v-if="messageUsername">
        {{ messageUsername }}
      </b-form-text>
    </b-form-group>

    <b-form-group label="Email:" label-for="email" class="mb-3">
      <b-form-input
        id="email"
        v-model="email"
        type="email"
        required
        placeholder="Enter your email"
        maxlength="40"
      ></b-form-input>
      <b-form-text v-if="messageEmail">
        {{ messageEmail }}
      </b-form-text>
    </b-form-group>

    <b-form-group label="Password:" label-for="password" class="mb-3">
      <b-form-input
        id="password"
        v-model="password"
        type="password"
        required
        placeholder="Enter a password"
        maxlength="16"
      ></b-form-input>
    </b-form-group>

    <b-form-group label="Confirm Password:" label-for="confirmPassword" class="mb-3">
      <b-form-input
        id="confirmPassword"
        v-model="confirmPassword"
        type="password"
        required
        placeholder="Confirm your password"
        maxlength="16"
      ></b-form-input>
      <b-form-text v-if="messagePassword">
        {{ messagePassword }}
      </b-form-text>
    </b-form-group>

    <b-button variant="success" type="submit" class="mb-3 w-100">Register</b-button>

    <b-form-text v-if="message">
      {{ message }}
    </b-form-text>
  </b-form>
</template>

<script>
export default {
  name: 'SignUpView',
  data() {
    return {
      username: '',
      email: '',
      password: '',
      confirmPassword: '',
      message: '',
      messageEmail: '',
      messageUsername: '',
      messagePassword: ''
    }
  },
  methods: {
    /**
     * Function use for clearing the message
     * @param {string} message - the text display based on the validation
     */
    clearMessage(message) {
      this[message] = ''
    },

    /**
     * Function use for creating new account
     * @return {void} return the event whent condition is met
     */

    registerUser() {
      this.messageUsername = ''
      this.messageEmail = ''
      this.messagePassword = ''
      this.message = ''

      if (localStorage.getItem(this.username)) {
        this.messageUsername = 'Username already exists!'
        return
      }

      for (let i = 0; i < localStorage.length; i++) {
        const userKey = localStorage.key(i)
        const user = JSON.parse(localStorage.getItem(userKey))
        if (user.email === this.email) {
          this.messageEmail = 'Email already exists!'
          return
        }
      }

      if (this.password !== this.confirmPassword) {
        this.messagePassword = 'Passwords do not match!'
        return
      }

      const user = {
        username: this.username,
        email: this.email,
        password: this.password
      }
      localStorage.setItem(this.username, JSON.stringify(user))

      this.message = 'User registered successfully!'
      this.username = ''
      this.email = ''
      this.password = ''
      this.confirmPassword = ''
    }
  }
}
</script>
---------------

<template>
  <b-form @submit.prevent="loginUser">
    <b-form-group label="Username:" label-for="username" class="mb-3">
      <b-form-input
        id="username"
        v-model="username"
        type="text"
        required
        placeholder="Enter your username"
      ></b-form-input>
    </b-form-group>

    <b-form-group label="Password:" label-for="password" class="mb-3">
      <b-form-input
        id="password"
        v-model="password"
        type="password"
        required
        placeholder="Enter your password"
      ></b-form-input>
    </b-form-group>

    <b-button variant="primary" type="submit" class="mb-3 w-100">Login</b-button>

    <b-form-text v-if="message">
      {{ message }}
    </b-form-text>
  </b-form>
</template>

<script>
export default {
  name: 'SignInView',
  data() {
    return {
      username: '',
      password: '',
      message: ''
    }
  },
  methods: {
    /**
     * Function use for emitting the username and getting the user credentials in local storage
     */
    loginUser() {
      const user = JSON.parse(localStorage.getItem(this.username))
      if (user && user.password === this.password) {
        this.message = 'Login successful!'
        this.$emit('login-success', this.username)
      } else {
        this.message = 'Invalid username or password!'
      }
    }
  }
}
</script>
