<template>
  <div class="app">
    <div class="sidebar">
      <img src="logo.png" alt="Logo" class="logo" />
      <ul class="workouts">
        <form
          class="form"
          :class="{ hidden: formHidden }"
          @submit.prevent="addWorkout"
          @keydown.enter.prevent
        >
          <div class="form__row">
            <label class="form__label">Type</label>
            <select
              v-model="workoutType"
              class="form__input form__input--type"
              @change="toggleElevationField"
            >
              <option value="running">Running</option>
              <option value="cycling">Cycling</option>
            </select>
          </div>
          <div class="form__row">
            <label class="form__label">Distance</label>
            <input
              v-model.number="distance"
              class="form__input form__input--distance"
              placeholder="km"
              required
            />
          </div>
          <div class="form__row">
            <label class="form__label">Duration</label>
            <input
              v-model.number="duration"
              class="form__input form__input--duration"
              placeholder="min"
              required
            />
          </div>
          <div v-if="workoutType === 'running'" class="form__row">
            <label class="form__label">Cadence</label>
            <input
              v-model.number="cadence"
              class="form__input form__input--cadence"
              placeholder="step/min"
              required
            />
          </div>
          <div v-if="workoutType === 'cycling'" class="form__row">
            <label class="form__label">Elev Gain</label>
            <input
              v-model.number="elevation"
              class="form__input form__input--elevation"
              placeholder="meters"
              required
            />
          </div>
          <button class="form__btn">OK</button>
        </form>

        <!-- Display each workout dynamically with delete button -->
        <li
          v-for="(workout, index) in workouts"
          :key="workout.id"
          :class="['workout', `workout--${workout.type}`]"
          @click="moveToPopup(workout)"
        >
          <h2 class="workout__title">{{ workout.description }}</h2>
          <div class="workout__details">
            <span class="workout__icon">{{ workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è' }}</span>
            <span class="workout__value">{{ workout.distance }}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">{{ workout.duration }}</span>
            <span class="workout__unit">min</span>
          </div>
          <div v-if="workout.type === 'running'" class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">{{ workout.pace.toFixed(1) }}</span>
            <span class="workout__unit">min/km</span>
          </div>
          <div v-if="workout.type === 'running'" class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">{{ workout.cadence }}</span>
            <span class="workout__unit">spm</span>
          </div>
          <div v-if="workout.type === 'cycling'" class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">{{ workout.speed.toFixed(1) }}</span>
            <span class="workout__unit">km/h</span>
          </div>
          <div v-if="workout.type === 'cycling'" class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">{{ workout.elevationGain }}</span>
            <span class="workout__unit">m</span>
          </div>
          <button class="delete-btn" @click.stop="deleteWorkout(index)">Delete</button>
        </li>
      </ul>
    </div>
    <div id="map"></div>
  </div>
</template>

<script>
import L from 'leaflet';

export default {
  data() {
    return {
      map: null,
      formHidden: true,
      workoutType: 'running',
      distance: 0,
      duration: 0,
      cadence: null,
      elevation: null,
      workouts: []
    };
  },
  mounted() {
    this.getUserPosition();
  },
  methods: {
    getUserPosition() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          this.loadMap,
          () => alert('Could not get your position')
        );
      }
    },
    loadMap(position) {
      const { latitude, longitude } = position.coords;
      const coords = [latitude, longitude];
      this.map = L.map('map').setView(coords, 13);

      L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
      }).addTo(this.map);

      this.map.on('click', this.showForm);
    },
    showForm(event) {
      this.formHidden = false;
      this.mapEvent = event;
    },
    hideForm() {
      this.formHidden = true;
      this.distance = this.duration = this.cadence = this.elevation = 0;
    },
    toggleElevationField() {
      this.formHidden = !this.formHidden;
    },
    addWorkout() {
      const { lat, lng } = this.mapEvent.latlng;
      const workout = {
        id: Date.now().toString(),
        type: this.workoutType,
        coords: [lat, lng],
        distance: this.distance,
        duration: this.duration,
        cadence: this.workoutType === 'running' ? this.cadence : null,
        elevation: this.workoutType === 'cycling' ? this.elevation : null,
        description: `${this.workoutType.charAt(0).toUpperCase() + this.workoutType.slice(1)} on ${new Date().toLocaleDateString()}`
      };

      // Calculate pace or speed
      if (workout.type === 'running') workout.pace = workout.duration / workout.distance;
      if (workout.type === 'cycling') workout.speed = workout.distance / (workout.duration / 60);

      this.workouts.push(workout);
      this.renderWorkoutMarker(workout);
      this.hideForm();
    },
    renderWorkoutMarker(workout) {
      L.marker(workout.coords)
        .addTo(this.map)
        .bindPopup(
          L.popup({
            maxWidth: 250,
            minWidth: 100,
            autoClose: false,
            closeOnClick: false,
            className: `${workout.type}-popup`
          })
        )
        .setPopupContent(
          `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
        )
        .openPopup();
    },
    moveToPopup(workout) {
      if (this.map) {
        this.map.setView(workout.coords, 13, {
          animate: true,
          pan: { duration: 1 }
        });
      }
    },
    deleteWorkout(index) {
      this.workouts.splice(index, 1);
    }
  }
};
</script>

<style scoped>
/* Paste content from style.css here */

/* Add some styling for the delete button */
.delete-btn {
  margin-top: 1rem;
  padding: 0.5rem 1rem;
  font-size: 1.2rem;
  color: white;
  background-color: red;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}
</style>












------------------------------------------
















<template>
  <div class="app">
    <div class="sidebar">
      <img src="logo.png" alt="Logo" class="logo" />
      <ul class="workouts">
        <form
          class="form"
          :class="{ hidden: formHidden }"
          @submit.prevent="addWorkout"
          @keydown.enter.prevent
        >
          <div class="form__row">
            <label class="form__label">Type</label>
            <select
              v-model="workoutType"
              class="form__input form__input--type"
              @change="toggleElevationField"
            >
              <option value="running">Running</option>
              <option value="cycling">Cycling</option>
            </select>
          </div>
          <div class="form__row">
            <label class="form__label">Distance</label>
            <input
              v-model.number="distance"
              class="form__input form__input--distance"
              placeholder="km"
              required
            />
          </div>
          <div class="form__row">
            <label class="form__label">Duration</label>
            <input
              v-model.number="duration"
              class="form__input form__input--duration"
              placeholder="min"
              required
            />
          </div>
          <div v-if="workoutType === 'running'" class="form__row">
            <label class="form__label">Cadence</label>
            <input
              v-model.number="cadence"
              class="form__input form__input--cadence"
              placeholder="step/min"
              required
            />
          </div>
          <div v-if="workoutType === 'cycling'" class="form__row">
            <label class="form__label">Elev Gain</label>
            <input
              v-model.number="elevation"
              class="form__input form__input--elevation"
              placeholder="meters"
              required
            />
          </div>
          <button class="form__btn">OK</button>
        </form>

        <!-- Display each workout dynamically with delete button -->
        <li
          v-for="(workout, index) in workouts"
          :key="workout.id"
          :class="['workout', `workout--${workout.type}`]"
          @click="moveToPopup(workout)"
        >
          <h2 class="workout__title">{{ workout.description }}</h2>
          <div class="workout__details">
            <span class="workout__icon">{{ workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è' }}</span>
            <span class="workout__value">{{ workout.distance }}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">{{ workout.duration }}</span>
            <span class="workout__unit">min</span>
          </div>
          <div v-if="workout.type === 'running'" class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">{{ workout.pace.toFixed(1) }}</span>
            <span class="workout__unit">min/km</span>
          </div>
          <div v-if="workout.type === 'running'" class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">{{ workout.cadence }}</span>
            <span class="workout__unit">spm</span>
          </div>
          <div v-if="workout.type === 'cycling'" class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">{{ workout.speed.toFixed(1) }}</span>
            <span class="workout__unit">km/h</span>
          </div>
          <div v-if="workout.type === 'cycling'" class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">{{ workout.elevationGain }}</span>
            <span class="workout__unit">m</span>
          </div>
          <button class="delete-btn" @click.stop="deleteWorkout(index)">Delete</button>
        </li>
      </ul>
    </div>
    <div id="map"></div>
  </div>
</template>

<script>
import L from 'leaflet';

export default {
  data() {
    return {
      map: null,
      formHidden: true,
      workoutType: 'running',
      distance: 0,
      duration: 0,
      cadence: null,
      elevation: null,
      workouts: []
    };
  },
  mounted() {
    this.getUserPosition();
    this.getLocalStorage(); // Load workouts from local storage
  },
  methods: {
    getUserPosition() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          this.loadMap,
          () => alert('Could not get your position')
        );
      }
    },
    loadMap(position) {
      const { latitude, longitude } = position.coords;
      const coords = [latitude, longitude];
      this.map = L.map('map').setView(coords, 13);

      L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
      }).addTo(this.map);

      this.map.on('click', this.showForm);

      // Render existing workouts as markers on the map
      this.workouts.forEach(workout => this.renderWorkoutMarker(workout));
    },
    showForm(event) {
      this.formHidden = false;
      this.mapEvent = event;
    },
    hideForm() {
      this.formHidden = true;
      this.distance = this.duration = this.cadence = this.elevation = 0;
    },
    toggleElevationField() {
      this.formHidden = !this.formHidden;
    },
    addWorkout() {
      const { lat, lng } = this.mapEvent.latlng;
      const workout = {
        id: Date.now().toString(),
        type: this.workoutType,
        coords: [lat, lng],
        distance: this.distance,
        duration: this.duration,
        cadence: this.workoutType === 'running' ? this.cadence : null,
        elevation: this.workoutType === 'cycling' ? this.elevation : null,
        description: `${this.workoutType.charAt(0).toUpperCase() + this.workoutType.slice(1)} on ${new Date().toLocaleDateString()}`
      };

      // Calculate pace or speed
      if (workout.type === 'running') workout.pace = workout.duration / workout.distance;
      if (workout.type === 'cycling') workout.speed = workout.distance / (workout.duration / 60);

      this.workouts.push(workout);
      this.renderWorkoutMarker(workout);
      this.setLocalStorage(); // Save workouts to local storage
      this.hideForm();
    },
    renderWorkoutMarker(workout) {
      L.marker(workout.coords)
        .addTo(this.map)
        .bindPopup(
          L.popup({
            maxWidth: 250,
            minWidth: 100,
            autoClose: false,
            closeOnClick: false,
            className: `${workout.type}-popup`
          })
        )
        .setPopupContent(
          `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
        )
        .openPopup();
    },
    moveToPopup(workout) {
      if (this.map) {
        this.map.setView(workout.coords, 13, {
          animate: true,
          pan: { duration: 1 }
        });
      }
    },
    deleteWorkout(index) {
      this.workouts.splice(index, 1);
      this.setLocalStorage(); // Update local storage after deletion
    },
    setLocalStorage() {
      localStorage.setItem('workouts', JSON.stringify(this.workouts));
    },
    getLocalStorage() {
      const data = JSON.parse(localStorage.getItem('workouts'));
      if (data) {
        this.workouts = data;
      }
    }
  }
};
</script>

<style scoped>
/* Paste content from style.css here */

/* Add some styling for the delete button */
.delete-btn {
  margin-top: 1rem;
  padding: 0.5rem 1rem;
  font-size: 1.2rem;
  color: white;
  background-color: red;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}
</style>


-----------------------------



:root {
  --color-brand--1: #ffb545;
  --color-brand--2: #00c46a;

  --color-dark--1: #2d3439;
  --color-dark--2: #42484d;
  --color-light--1: #aaa;
  --color-light--2: #ececec;
  --color-light--3: rgb(214, 222, 224);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
  box-sizing: border-box;
}

body {
  font-family: 'Manrope', sans-serif;
  color: var(--color-light--2);
  font-weight: 400;
  line-height: 1.6;
  height: 100vh;
  overscroll-behavior-y: none;

  background-color: #fff;
  padding: 2.5rem;

  display: flex;
}

/* GENERAL */
a:link,
a:visited {
  color: var(--color-brand--1);
}

/* SIDEBAR */
.sidebar {
  flex-basis: 50rem;
  background-color: var(--color-dark--1);
  padding: 3rem 5rem 4rem 5rem;
  display: flex;
  flex-direction: column;
}

.logo {
  height: 5.2rem;
  align-self: center;
  margin-bottom: 4rem;
}

.workouts {
  list-style: none;
  height: 77vh;
  overflow-y: scroll;
  overflow-x: hidden;
}

.workouts::-webkit-scrollbar {
  width: 0;
}

.workout {
  background-color: var(--color-dark--2);
  border-radius: 5px;
  padding: 1.5rem 2.25rem;
  margin-bottom: 1.75rem;
  cursor: pointer;

  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  gap: 0.75rem 1.5rem;
}
.workout--running {
  border-left: 5px solid var(--color-brand--2);
}
.workout--cycling {
  border-left: 5px solid var(--color-brand--1);
}

.workout__title {
  font-size: 1.7rem;
  font-weight: 600;
  grid-column: 1 / -1;
}

.workout__details {
  display: flex;
  align-items: baseline;
}

.workout__icon {
  font-size: 1.8rem;
  margin-right: 0.2rem;
  height: 0.28rem;
}

.workout__value {
  font-size: 1.5rem;
  margin-right: 0.5rem;
}

.workout__unit {
  font-size: 1.1rem;
  color: var(--color-light--1);
  text-transform: uppercase;
  font-weight: 800;
}

/* FORM */
.form {
  background-color: var(--color-dark--2);
  border-radius: 5px;
  padding: 1.5rem 2.75rem;
  margin-bottom: 1.75rem;

  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0.5rem 2.5rem;

  /* Match height and activity boxes */
  height: 9.25rem;
  transition: all 0.5s, transform 1ms;
}

.form.hidden {
  transform: translateY(-30rem);
  height: 0;
  padding: 0 2.25rem;
  margin-bottom: 0;
  opacity: 0;
}

.form__row {
  display: flex;
  align-items: center;
}

.form__row--hidden {
  display: none;
}

.form__label {
  flex: 0 0 50%;
  font-size: 1.5rem;
  font-weight: 600;
}

.form__input {
  width: 100%;
  padding: 0.3rem 1.1rem;
  font-family: inherit;
  font-size: 1.4rem;
  border: none;
  border-radius: 3px;
  background-color: var(--color-light--3);
  transition: all 0.2s;
}

.form__input:focus {
  outline: none;
  background-color: #fff;
}

.form__btn {
  display: none;
}

.copyright {
  margin-top: auto;
  font-size: 1.3rem;
  text-align: center;
  color: var(--color-light--1);
}

.twitter-link:link,
.twitter-link:visited {
  color: var(--color-light--1);
  transition: all 0.2s;
}

.twitter-link:hover,
.twitter-link:active {
  color: var(--color-light--2);
}

/* MAP */
#map {
  flex: 1;
  height: 100%;
  background-color: var(--color-light--1);
}

/* Popup width is defined in JS using options */
.leaflet-popup .leaflet-popup-content-wrapper {
  background-color: var(--color-dark--1);
  color: var(--color-light--2);
  border-radius: 5px;
  padding-right: 0.6rem;
}

.leaflet-popup .leaflet-popup-content {
  font-size: 1.5rem;
}

.leaflet-popup .leaflet-popup-tip {
  background-color: var(--color-dark--1);
}

.running-popup .leaflet-popup-content-wrapper {
  border-left: 5px solid var(--color-brand--2);
}
.cycling-popup .leaflet-popup-content-wrapper {
  border-left: 5px solid var(--color-brand--1);
}

/* Delete button styling */
.delete-btn {
  margin-top: 1rem;
  padding: 0.5rem 1rem;
  font-size: 1.2rem;
  color: #fff;
  background-color: #ff5555;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  grid-column: span 2;
  text-align: center;
  transition: background-color 0.3s;
}

.delete-btn:hover {
  background-color: #ff3333;
}

