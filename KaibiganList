<template>
  <b-container>
    <div v-for="btn in LIST_BTN" :key="btn.id">
      <li v-for="(details, index) in renderingKaibigans" :key="details.id">
        <button-slot>Kaibigan Details</button-slot>
        <img v-show="details.activeFavourite" src="../../../assets/img/support.png" />

        <h2 class="fullname">{{ details.kaibigan.nickname }}</h2>

        <b-button id="show" @click="toggleDetails(details)"
          >{{ details.activeKaibigan ? 'Hide' : 'Show' }} Details</b-button
        >

        <ul v-show="details.activeKaibigan">
          <b-button id="favourite" variant="info" @click="favourite(details)"> Favourite</b-button>

          <b-button id="remove" variant="danger" @click="remove(index)">Remove</b-button>

          <li class="label" v-for="(name, label) in details.kaibigan" :key="name.id">
            <div>
              <strong>{{ LABELS[label] }}</strong
              >: <span v-if="label === 'love'">{{ name.join(', ') }}</span>

              <span v-else>{{ name }}</span>
            </div>
          </li>
        </ul>
      </li>
    </div>
  </b-container>
</template>

<script>
import CommonButton from '@/components/common/CommonButton.vue'
import { LISTBUTTONS } from '@/common/recipe/rButtonRecipe'
import ButtonSlot from '@/components/pages/Slamboo/ButtonSlot.vue'
import { KAIBIGANLABELS } from '@/common/recipe/rCommonLabels'
import { Favourite } from '@/common/mixin/favorite'

export default {
  name: 'KaibiganList',
  mixins: [Favourite],

  components: {
    CommonButton,
    ButtonSlot
  },

  /**
   * @description
   * Receives data array and properties
   * @see Kaibigan.js
   * @data object:
   * data {array} - gets the listahanKaibigan array from kaibgan.vue
   */

  props: {
    kaibigans: { data: Array, required: true }
  },

  data() {
    return {
      LIST_BTN: LISTBUTTONS,
      detailsAreVisible: false,
      favouriteKaibigan: false,
      indexArray: null,
      LABELS: KAIBIGANLABELS
    }
  },

  computed: {
    /**
     * Function to return kaibigans
     * @return - to return the kaibigans props
     */

    renderingKaibigans() {
      return this.kaibigans
    }
  },

  methods: {
    /**
     * Function to show the details of kabigans
     * @param {array} details - gets the details and determines whethere true or false
     */

    toggleDetails(details) {
      details.activeKaibigan = !details.activeKaibigan
    },

    /**
     * Function to remove the kabigan details
     * @param {array} id - gets the id so that it will use it for index
     */
    remove(id) {
      const remove = confirm('Kabigan will be removed, Procced?')
      if (remove) this.$emit('removebtn', id)
    }
  }
}
</script>

<style scoped>
strong {
  text-transform: capitalize;
}

* {
  box-sizing: border-box;
}

img {
  width: 5vb;
  padding-left: 7px;
  padding-top: 6px;
}
html {
  font-family: 'Jost', sans-serif;
}
body {
  margin: 0;
}
header {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  margin: 3rem auto;
  border-radius: 10px;
  padding: 1rem;
  background-color: #58004d;
  color: white;
  text-align: center;
  width: 90%;
  max-width: 40rem;
}
#app ul {
  margin-top: 5px;
  margin: 0;
  padding: 0;
  list-style: none;
}
#app li {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);
  margin: 1rem auto;
  border-radius: 10px;
  padding: 1rem;
  text-align: center;
  width: 90%;
  max-width: 40rem;
  list-style-type: none;
  font-size: 1vw;
  word-wrap: break-word;
}
#app h2 {
  padding-top: 5px;
  margin-top: 50px;
  font-size: 1.8vw;
  border-bottom: 4px solid #ccc;
  color: #3b445b;
  margin: 0 0 1rem 0;
  padding-bottom: 8px;
  text-transform: capitalize;
}
#show {
  font: inherit;
  cursor: pointer;
  border: 1px solid #49d292;
  background-color: #49d292;
  color: white;
  padding: 0.5rem 1rem;
  margin: 0.5rem;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.26);
}

#remove {
  font: inherit;
  cursor: pointer;
  border: 1px solid #dc3545;
  padding: 0.5rem 1rem;
  margin: 0.5rem;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.26);
}

#favourite {
  font: inherit;
  cursor: pointer;
  padding: 0.5rem 1rem;
  margin: 0.5rem;
  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.26);
}

#show:hover,
#remove:active {
  background-color: #3b445b;
  border-color: #3b445b;
  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.26);
}
</style>


-----------------------------------------------------




// KaibiganList.spec.js

import { shallowMount } from '@vue/test-utils'
import KaibiganList from '@/components/pages/Slamboo/KaibiganList.vue'

describe('KaibiganList.vue', () => {
  let wrapper

  const mockKaibigans = [
    {
      id: 1,
      kaibigan: { nickname: 'John Doe', love: ['Quality Time', 'Acts of Service'] },
      activeKaibigan: false,
      activeFavourite: false
    },
    {
      id: 2,
      kaibigan: { nickname: 'Jane Doe', love: ['Words of Affirmation', 'Gifts'] },
      activeKaibigan: false,
      activeFavourite: false
    }
  ]

  beforeEach(() => {
    wrapper = shallowMount(KaibiganList, {
      propsData: {
        kaibigans: mockKaibigans
      }
    })
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  it('should render the correct number of kaibigan details', () => {
    const listItems = wrapper.findAll('li')
    expect(listItems.length).toBe(mockKaibigans.length)
  })

  it('should toggle details when button is clicked', async () => {
    const button = wrapper.find('#show')
    await button.trigger('click')
    expect(mockKaibigans[0].activeKaibigan).toBe(true) // Check if the first kaibigan's details are shown

    await button.trigger('click')
    expect(mockKaibigans[0].activeKaibigan).toBe(false) // Check if the details are hidden again
  })

  it('should emit removebtn event when remove button is clicked', async () => {
    const confirmSpy = jest.spyOn(window, 'confirm').mockImplementation(() => true)
    const removeButton = wrapper.find('#remove')
    
    await removeButton.trigger('click')

    expect(confirmSpy).toHaveBeenCalledWith('Kabigan will be removed, Procced?')
    expect(wrapper.emitted().removebtn).toBeTruthy()
    expect(wrapper.emitted().removebtn[0]).toEqual([0]) // Check if the correct index is emitted

    confirmSpy.mockRestore()
  })

  it('should not emit removebtn event if confirm is canceled', async () => {
    const confirmSpy = jest.spyOn(window, 'confirm').mockImplementation(() => false)
    const removeButton = wrapper.find('#remove')

    await removeButton.trigger('click')

    expect(confirmSpy).toHaveBeenCalledWith('Kabigan will be removed, Procced?')
    expect(wrapper.emitted().removebtn).toBeUndefined() // Check that no event was emitted

    confirmSpy.mockRestore()
  })

  it('should display the correct kaibigan nickname', () => {
    const nickname = wrapper.find('h2.fullname')
    expect(nickname.text()).toBe(mockKaibigans[0].kaibigan.nickname)
  })

  it('should show favourite icon if activeFavourite is true', async () => {
    // Set activeFavourite to true for the first kaibigan
    mockKaibigans[0].activeFavourite = true
    await wrapper.setProps({ kaibigans: mockKaibigans })

    const img = wrapper.find('img')
    expect(img.exists()).toBe(true) // Check if the image is rendered
  })

  it('should not show favourite icon if activeFavourite is false', async () => {
    // Ensure activeFavourite is false
    mockKaibigans[0].activeFavourite = false
    await wrapper.setProps({ kaibigans: mockKaibigans })

    const img = wrapper.find('img')
    expect(img.exists()).toBe(false) // Check if the image is not rendered
  })
})




--------------------------------------



Explanation of the Test File:
Setup: The beforeEach function initializes a fresh instance of the KaibiganList component with mock data before each test.

Rendering Test: The first test checks that the component renders the correct number of kaibigan details based on the props passed.

Toggling Details: The second test verifies that clicking the "Show Details" button toggles the visibility of the kaibigan's details.

Removing Kaibigan: The third test checks that clicking the "Remove" button emits the removebtn event if the user confirms the action.

Canceling Removal: The fourth test ensures that the removebtn event is not emitted if the user cancels the confirmation dialog.

Displaying Nickname: The fifth test checks that the correct kaibigan nickname is displayed.
