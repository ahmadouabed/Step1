<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <header><h1>Keeps</h1></header>

    <div>
      <b-input-group prepend="Keeps" class="mt-3">
        <b-form-input v-model="userInput" placeholder="add to do..."></b-form-input>

        <b-button variant="info" @click="clickAddTask">Add</b-button>
      </b-input-group>

      <b-modal ref="my-modal" hide-footer title="Keeps">
        <div class="d-block">
          <h3>FAQS</h3>

          <p v-for="texts in Object.values(modalTexts)" :key="texts.id" class="">{{ texts }}</p>
        </div>
      </b-modal>
    </div>

    <b-row>
      <b-col v-for="button in buttons" :key="button.id">
        <component
          class="py-3"
          :is="button.componentName"
          :key="button"
          :input="button"
          @change="newFunc"
        ></component>
      </b-col>
    </b-row>

    <div class="todo-table">
      <div class="table-header">
        <div class="table-cell">{{ this.todo.length === 0 ? 'No Task' : 'Task' }}</div>
      </div>
      <div class="table-body">
        <div
          class="table-row"
          v-for="(item, index) in filterTodo"
          :key="index"
          :class="{ 'even-row': index % 2 === 0, completed: item.completed }"
          :style="getStyle(item)"
        >
          <div class="table-cell">
            {{ item.value }}
            <span v-if="item.tag" class="badge bg-secondary">{{ item.tag }}</span>
          </div>
          <div class="table-cell2">
            <b-button-group>
              <b-button variant="success" @click="toggleCompleted(index)">
                {{ item.completed ? 'Undo' : 'Complete' }}
              </b-button>
              <b-button variant="info" @click="editTodo(index)">Edit</b-button>
              <b-button variant="danger" @click="confirmDelete(index)">Delete</b-button>
            </b-button-group>
          </div>
        </div>
      </div>
    </div>
  </b-container>
</template>

<script>
import { TODOBUTTONS, TODOFUNCTIONS } from '@/common/recipe/rButtonRecipe'
import CommonButton from '@/components/common/CommonButton.vue'
import { TODOMODAL } from '@/common/recipe/rTextsRecipe'

export default {
  name: 'Todo',
  components: { CommonButton },

  data() {
    return {
      buttons: [...TODOBUTTONS],
      todoBTN: [...TODOFUNCTIONS],
      modalTexts: { ...TODOMODAL },
      userInput: '',
      searchInput: '',
      todo: []
    }
  },

  computed: {
    /**
     * Function to filter to do list to add them continously
     */

    filterTodo() {
      return this.todo.filter((item) => item.value.includes(this.searchInput))
    }
  },

  methods: {
    /**
     * Function to add the to do list of user
     */

    addItem() {
      if (this.userInput.trim() !== '') {
        const newItem = {
          id: Math.random(),
          value: this.userInput.trim(),
          completed: false
        }

        this.todo.push(newItem)
        this.userInput = ''
      }
    },

    /**
     * Funtion to have a confirmation before deleting a todo list
     * @param {number} index - gets the index of filterTodo to determine the exact to do list
     */

    confirmDelete(index) {
      const deleteConfirmation = confirm('Are you sure you want to delete this task?')
      if (deleteConfirmation) {
        this.deleteTodo(index)
      }
    },

    /**
     * Function to delete the to do list
     * @param {number} index  - gets the index of filterTodo to determine the exact to do list
     */

    deleteTodo(index) {
      this.todo.splice(index, 1)
    },

    /**
     * Function to prompt user to edit the to do list using index and value of array
     * @param {number} index - gets the index of filterTodo to determine the exact to do list
     */

    editTodo(index) {
      const editedTodo = prompt('Edit the todo:', this.todo[index].value)
      if (editedTodo !== null && editedTodo.trim() !== '') {
        this.todo[index].value = editedTodo.trim()
      }
    },

    /**
     * Function to toggle the completed to do list and maps a new array to make the item.tag complete
     * @param {number} index - gets the index of filterTodo to determine the exact to do list
     */

    toggleCompleted(index) {
      this.todo[index].completed = !this.todo[index].completed

      this.todo = this.todo.map((item) => {
        if (item.completed) {
          item.tag = 'Completed'
        } else {
          delete item.tag
        }
        return item
      })
    },

    /**
     * Function to loop array and if array is greater than 0 it will delete all the to do list data
     */

    deleteAll() {
      while (this.todo.length > 0) {
        this.todo.pop()
      }
    },

    /**
     * Function to return if userinput is empty
     * @return {boolean} - return the userinput when empty
     */

    initializeData() {
      return this.userInput === ''
    },

    /**
     * Function to alert user if userinput is empty before adding item
     */

    clickAddTask() {
      if (this.initializeData() || this.userInput.trim() === '') {
        alert('Please Input a Note')
      } else {
        this.addItem()
      }
    },

    /**
     * Function to clear all completed to do list
     */

    clearCompleted() {
      this.todo = this.todo.filter((item) => !item.completed)
    },

    /**
     * Function to reference my modal
     */

    showModal() {
      this.$refs['my-modal'].show()
    },

    /**
     * Function to handle validations of user when clicking buttons
     * @param {string} action - gets the action type of buttons
     */
    newFunc(action) {
      const actions = {
        clearAll: () => {
          if (this.todo.length === 0) {
            alert('Add To Do first before Clearing All')
          } else {
            const remove = confirm('Are you sure you want to Clear All?')
            if (remove) this.deleteAll()
          }
        },
        clearComp: () => {
          if (this.todo.length === 0) {
            alert('Add To Do first before Clearing Completed')
          } else if (this.toggleCompleted === false) {
            alert('Clear First')
          } else {
            this.clearCompleted()
          }
        },
        faq: () => {
          this.showModal()
        }
      }

      if (actions[action]) {
        actions[action]()
      }
    },
    /**
     * Function to set the color and background of completed items
     * @param {number} item - gets the item of the filterTodo
     * @returns {object} - returns the color and backgroudColor if item is completed
     */

    getStyle(item) {
      return {
        color: item.completed ? '#888' : '#000',
        backgroundColor: item.completed ? '#f0f0f0' : '#fff'
      }
    }
  }
}
</script>

<style scoped>
.bg-secondary {
  background-color: #198754 !important;
}

header {
  background-color: rgb(7, 179, 185);
  color: white;
  padding: 10px 0;
  border-radius: 5px;
  text-align: center;
}

.todo-table {
  border: 1px solid #ccc;
  border-radius: 5px;
  overflow: hidden;
}

.table-header {
  font-weight: bold;
  display: flex;
  background-color: #f0f0f0;
  padding: 10px;
}

.table-cell {
  flex: 1;
  padding: 10px;
  font-size: 18px;
  word-wrap: break-word;
}

.table-cell2 {
  padding: 10px;
  font-size: 18px;
  word-wrap: break-word;
}

.table-body {
  display: grid;
  word-break: break-word;
}

.table-row {
  display: flex;
  border-top: 1px solid #ccc;
  word-wrap: break-word;
}

.even-row {
  background-color: #f9f9f9;
}

.completed {
  text-decoration: line-through;
  background-color: #f0f0f0;
}

.completed-cell {
  color: #888;
}

.btn[disabled] {
  cursor: not-allowed;
  opacity: 0.65;
}

.faq {
  font-weight: bolder;
}
</style>


---------------



import { shallowMount } from '@vue/test-utils'
import Todo from '@/components/Todo.vue'
import { TODOBUTTONS, TODOFUNCTIONS } from '@/common/recipe/rButtonRecipe'
import { TODOMODAL } from '@/common/recipe/rTextsRecipe'

describe('Todo.vue', () => {
  let wrapper

  beforeEach(() => {
    wrapper = shallowMount(Todo)
  })

  it('initializes with correct data', () => {
    expect(wrapper.vm.buttons).toEqual(TODOBUTTONS)
    expect(wrapper.vm.todoBTN).toEqual(TODOFUNCTIONS)
    expect(wrapper.vm.modalTexts).toEqual(TODOMODAL)
    expect(wrapper.vm.userInput).toBe('')
    expect(wrapper.vm.searchInput).toBe('')
    expect(wrapper.vm.todo).toEqual([])
  })

  it('adds a new todo item', async () => {
    wrapper.setData({ userInput: 'New Todo' })
    await wrapper.vm.addItem()
    expect(wrapper.vm.todo.length).toBe(1)
    expect(wrapper.vm.todo[0].value).toBe('New Todo')
    expect(wrapper.vm.userInput).toBe('')
  })

  it('does not add an empty todo item', async () => {
    wrapper.setData({ userInput: '   ' })
    await wrapper.vm.addItem()
    expect(wrapper.vm.todo.length).toBe(0)
  })

  it('deletes a todo item', async () => {
    wrapper.setData({ todo: [{ id: 1, value: 'Test Todo', completed: false }] })
    await wrapper.vm.deleteTodo(0)
    expect(wrapper.vm.todo.length).toBe(0)
  })

  it('edits a todo item', async () => {
    wrapper.setData({ todo: [{ id: 1, value: 'Old Todo', completed: false }] })
    global.prompt = jest.fn(() => 'New Todo')
    await wrapper.vm.editTodo(0)
    expect(wrapper.vm.todo[0].value).toBe('New Todo')
  })

  it('toggles completed status of a todo item', async () => {
    wrapper.setData({ todo: [{ id: 1, value: 'Test Todo', completed: false }] })
    await wrapper.vm.toggleCompleted(0)
    expect(wrapper.vm.todo[0].completed).toBe(true)
    expect(wrapper.vm.todo[0].tag).toBe('Completed')
    await wrapper.vm.toggleCompleted(0)
    expect(wrapper.vm.todo[0].completed).toBe(false)
    expect(wrapper.vm.todo[0].tag).toBeUndefined()
  })

  it('deletes all todo items', async () => {
    wrapper.setData({ todo: [{ id: 1, value: 'Todo 1' }, { id: 2, value: 'Todo 2' }] })
    await wrapper.vm.deleteAll()
    expect(wrapper.vm.todo.length).toBe(0)
  })

  it('initializes data correctly', () => {
    wrapper.setData({ userInput: '' })
    expect(wrapper.vm.initializeData()).toBe(true)
    wrapper.setData({ userInput: 'Test' })
    expect(wrapper.vm.initializeData()).toBe(false)
  })

  it('handles click add task', async () => {
    global.alert = jest.fn()
    wrapper.setData({ userInput: '' })
    await wrapper.vm.clickAddTask()
    expect(global.alert).toHaveBeenCalledWith('Please Input a Note')

    wrapper.setData({ userInput: 'New Todo' })
    await wrapper.vm.clickAddTask()
    expect(wrapper.vm.todo.length).toBe(1)
  })

  it('clears completed todos', async () => {
    wrapper.setData({
      todo: [
        { id: 1, value: 'Todo 1', completed: true },
        { id: 2, value: 'Todo 2', completed: false }
      ]
    })
    await wrapper.vm.clearCompleted()
    expect(wrapper.vm.todo.length).toBe(1)
    expect(wrapper.vm.todo[0].value).toBe('Todo 2')
  })

  it('shows modal', () => {
    wrapper.vm.$refs['my-modal'] = { show: jest.fn() }
    wrapper.vm.showModal()
    expect(wrapper.vm.$refs['my-modal'].show).toHaveBeenCalled()
  })

  it('handles newFunc actions', async () => {
    global.alert = jest.fn()
    global.confirm = jest.fn(() => true)

    // Test clearAll
    await wrapper.vm.newFunc('clearAll')
    expect(global.alert).toHaveBeenCalledWith('Add To Do first before Clearing All')

    wrapper.setData({ todo: [{ id: 1, value: 'Todo 1' }] })
    await wrapper.vm.newFunc('clearAll')
    expect(wrapper.vm.todo.length).toBe(0)

    // Test clearComp
    await wrapper.vm.newFunc('clearComp')
    expect(global.alert).toHaveBeenCalledWith('Add To Do first before Clearing Completed')

    // Test faq
    wrapper.vm.showModal = jest.fn()
    await wrapper.vm.newFunc('faq')
    expect(wrapper.vm.showModal).toHaveBeenCalled()
  })

  it('gets correct style for todo items', () => {
    const completedItem = { completed: true }
    const incompleteItem = { completed: false }

    expect(wrapper.vm.getStyle(completedItem)).toEqual({
      color: '#888',
      backgroundColor: '#f0f0f0'
    })

    expect(wrapper.vm.getStyle(incompleteItem)).toEqual({
      color: '#000',
      backgroundColor: '#fff'
    })
  })

  it('filters todo items based on search input', async () => {
    wrapper.setData({
      todo: [
        { id: 1, value: 'Todo 1' },
        { id: 2, value: 'Todo 2' },
        { id: 3, value: 'Different task' }
      ],
      searchInput: 'Todo'
    })

    expect(wrapper.vm.filterTodo.length).toBe(2)

    wrapper.setData({ searchInput: 'Different' })
    expect(wrapper.vm.filterTodo.length).toBe(1)
  })
})


--------------------




import { shallowMount } from '@vue/test-utils';
import Todo from '@/Todo.vue';

describe('Todo.vue', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = shallowMount(Todo, {
      stubs: ['b-container', 'b-input-group', 'b-form-input', 'b-button', 
              'b-modal', 'b-row', 'b-col', 'component', 'b-button-group'],
    });
  });

  test('initializes with default data', () => {
    expect(wrapper.vm.userInput).toBe('');
    expect(wrapper.vm.todo).toEqual([]);
    expect(wrapper.vm.modalTexts).toBeDefined();
  });

  test('addItem adds a new todo item', () => {
    wrapper.setData({ userInput: 'New Task' });
    wrapper.vm.addItem();

    expect(wrapper.vm.todo.length).toBe(1);
    expect(wrapper.vm.todo[0].value).toBe('New Task');
    expect(wrapper.vm.userInput).toBe('');
  });

  test('addItem does not add an empty todo', () => {
    wrapper.setData({ userInput: '  ' });
    wrapper.vm.addItem();

    expect(wrapper.vm.todo.length).toBe(0);
  });

  test('confirmDelete calls deleteTodo after confirmation', () => {
    jest.spyOn(window, 'confirm').mockReturnValue(true);
    wrapper.setData({ todo: [{ value: 'Task 1', completed: false }] });

    wrapper.vm.confirmDelete(0);

    expect(wrapper.vm.todo.length).toBe(0);
  });

  test('confirmDelete does nothing if user cancels', () => {
    jest.spyOn(window, 'confirm').mockReturnValue(false);
    wrapper.setData({ todo: [{ value: 'Task 1', completed: false }] });

    wrapper.vm.confirmDelete(0);

    expect(wrapper.vm.todo.length).toBe(1);
  });

  test('editTodo updates a todo item', () => {
    jest.spyOn(window, 'prompt').mockReturnValue('Edited Task');
    wrapper.setData({ todo: [{ value: 'Task 1', completed: false }] });

    wrapper.vm.editTodo(0);

    expect(wrapper.vm.todo[0].value).toBe('Edited Task');
  });

  test('editTodo does nothing if input is empty or canceled', () => {
    jest.spyOn(window, 'prompt').mockReturnValue('');
    wrapper.setData({ todo: [{ value: 'Task 1', completed: false }] });

    wrapper.vm.editTodo(0);

    expect(wrapper.vm.todo[0].value).toBe('Task 1');
  });

  test('toggleCompleted toggles completion status', () => {
    wrapper.setData({ todo: [{ value: 'Task 1', completed: false }] });

    wrapper.vm.toggleCompleted(0);

    expect(wrapper.vm.todo[0].completed).toBe(true);
    expect(wrapper.vm.todo[0].tag).toBe('Completed');

    wrapper.vm.toggleCompleted(0);

    expect(wrapper.vm.todo[0].completed).toBe(false);
    expect(wrapper.vm.todo[0].tag).toBeUndefined();
  });

  test('deleteAll removes all todos', () => {
    wrapper.setData({ todo: [{ value: 'Task 1' }, { value: 'Task 2' }] });

    wrapper.vm.deleteAll();

    expect(wrapper.vm.todo.length).toBe(0);
  });

  test('clearCompleted removes only completed todos', () => {
    wrapper.setData({ todo: [{ value: 'Task 1', completed: true }, { value: 'Task 2', completed: false }] });

    wrapper.vm.clearCompleted();

    expect(wrapper.vm.todo.length).toBe(1);
    expect(wrapper.vm.todo[0].value).toBe('Task 2');
  });

  test('initializeData returns true if userInput is empty', () => {
    wrapper.setData({ userInput: '' });
    expect(wrapper.vm.initializeData()).toBe(true);
  });

  test('clickAddTask shows alert for empty input', () => {
    jest.spyOn(window, 'alert').mockImplementation(() => {});
    wrapper.setData({ userInput: ' ' });

    wrapper.vm.clickAddTask();

    expect(window.alert).toHaveBeenCalledWith('Please Input a Note');
  });

  test('clickAddTask calls addItem for valid input', () => {
    jest.spyOn(wrapper.vm, 'addItem').mockImplementation(() => {});
    wrapper.setData({ userInput: 'Task' });

    wrapper.vm.clickAddTask();

    expect(wrapper.vm.addItem).toHaveBeenCalled();
  });

  test('showModal shows the modal', () => {
    const showMock = jest.fn();
    wrapper.vm.$refs['my-modal'] = { show: showMock };

    wrapper.vm.showModal();

    expect(showMock).toHaveBeenCalled();
  });

  test('newFunc handles clearAll action correctly', () => {
    jest.spyOn(window, 'confirm').mockReturnValue(true);
    wrapper.setData({ todo: [{ value: 'Task 1' }] });

    wrapper.vm.newFunc('clearAll');

    expect(wrapper.vm.todo.length).toBe(0);
  });

  test('getStyle returns correct style for completed items', () => {
    const style = wrapper.vm.getStyle({ completed: true });

    expect(style).toEqual({
      color: '#888',
      backgroundColor: '#f0f0f0',
    });
  });

  test('getStyle returns correct style for incomplete items', () => {
    const style = wrapper.vm.getStyle({ completed: false });

    expect(style).toEqual({
      color: '#000',
      backgroundColor: '#fff',
    });
  });
});

