<template>
  <b-container fluid class="my-4 w-50">
    <!-- Website Heading -->
    <h1 class="text-center py-4 bg-success-subtle border border-success rounded-3 text-success">
      <i class="bi bi-sticky-fill"></i> {{ headings }}
    </h1>

    <!-- Alert message -->
    <b-alert variant="danger" v-model="showError" dismissible class="mb-3">
      {{ alertMessage }}
    </b-alert>

    <!-- Input and Add Task Button -->
    <b-input-group class="my-3" v-for="item in items" :key="item">
      <component
        :is="item.componentName"
        :key="itemKey"
        :input="item"
        @formData="addTextTask"
      ></component>
      <div v-for="addTask in addTasks" :key="addTask">
        <component :is="addTask.componentName" :key="addTask" :input="addTask" @action="addTodoTask"
          ><i class="bi bi-clipboard2-plus-fill"></i
        ></component>
      </div>
    </b-input-group>

    <!-- FAQs, Clear completed, Clear all -->
    <b-row>
      <b-col class="mb-2" v-for="button in buttons" :key="button.id">
        <component
          class="pb-3"
          :is="button.componentName"
          :key="button"
          :input="button"
          @action="getButtonFunctionality"
          >{{ button.display.label }}</component
        ></b-col
      >
    </b-row>

    <!-- Task List -->
    <b-list-group class="mb-3 d-flex flex-wrap" v-if="tasks.length !== 0">
      <b-list-group-item
        v-for="(task, index) in tasks"
        :key="index"
        class="d-flex justify-content-between align-items-center mb-3 border border-success rounded-3"
        :style="getStyleCompleted(task)"
      >
        <div class="d-flex gap-3">
          <b-form-checkbox v-model="task.completed" class="mr-3"></b-form-checkbox>
          <span
            class="text-break fw-semibold"
            :class="{ 'text-decoration-line-through': task.completed }"
          >
            {{ task.text }}
          </span>
        </div>
        <b-row v-for="deleteBtn in deleteBtns" :key="deleteBtn.id">
          <component
            :is="deleteBtn.componentName"
            :key="deleteBtn.id"
            :input="deleteBtn"
            @action="deleteTask(index)"
            ><i class="bi bi-trash3-fill"></i>{{ deleteBtn.display.label }}</component
          >
        </b-row>
      </b-list-group-item>
    </b-list-group>

    <b-card v-if="tasks.length === 0" class="bg-success-subtle"
      ><h2 class="text-center text-success">{{ todoText.noItems }}</h2></b-card
    >

    <!-- Modal components -->
    <b-modal
      ref="modal-1"
      title="Frequently Asked Questions"
      header-bg-variant="info"
      header-text-variant="dark"
      hide-footer
      centered
    >
      <ol>
        <li class="fw-bold mb-2" v-for="(faq, index) in modalItems" :key="index">
          <div v-for="(value, i) in Object.values(faq)" :key="i">
            <span v-if="i === 0">
              {{ value }}
            </span>
            <ul v-else class="fw-normal my-2">
              <li>{{ value }}</li>
            </ul>
          </div>
        </li>
      </ol>
    </b-modal>
  </b-container>
</template>

<script>
import CommonButton from '@/components/common/CommonButton.vue'
import { TODOLIST_BUTTON } from '@/common/recipe/rButton'
import { ADDTASK_BUTTON, DELETEBUTTON_PROPERTIES, TODOLIST_INPUT } from '@/common/recipe/rToDoList'
import CommonToDoInput from '@/components/common/CommonToDoInput.vue'
import { MODAL_ITEM, TODO_TEXT } from '@/common/recipe/rToDoListData'
import CommonLabel from '@/components/common/CommonLabel.vue'

export default {
  name: 'ToDoList',
  components: { CommonToDoInput, CommonButton, CommonLabel },
  data() {
    return {
      buttons: [...TODOLIST_BUTTON],
      items: [...TODOLIST_INPUT],
      addTasks: [...ADDTASK_BUTTON],
      deleteBtns: [...DELETEBUTTON_PROPERTIES],
      modalItems: MODAL_ITEM,
      todoText: TODO_TEXT,
      headings: 'To Do List',
      userInput: '',
      alertMessage: '',
      showError: false,
      tasks: [],
      itemKey: 0
    }
  },
  methods: {
    /**
     * Function use to store the inputed task
     * @param {string} data - the task inputed in the input field
     */
    addTextTask(data) {
      this.userInput = data.value
    },
    /**
     * Function use for the functionality of FAQs, Clear Completed, and Clear All buttons
     * @param {string} actionType - the value of the actionType of each button
     */
    getButtonFunctionality(actionType) {
      const actionTypeValue = {
        faqs: () => this.$refs['modal-1'].show(),
        clearCompleted: () => this.clearCompletedTask(),
        clearAll: () => this.clearAllTasks()
      }
      actionTypeValue[actionType]?.()
    },

    /**
     * Function use for adding the inputed task in the list
     */
    addTodoTask() {
      const userInput = this.userInput
      const tasks = this.tasks
      if (userInput.trim() === '') {
        this.showError = true
        this.alertMessage = 'Task cannot be empty or consist only of spaces!'
      } else {
        tasks.push({ text: userInput, completed: false })
        this.userInput = ''
        this.showError = false
        this.itemKey += 1
      }
    },
    /**
     * Function use for deleting specific task
     * @param {number} index - use as reference in deleting the specific task
     */
    deleteTask(index) {
      const tasks = this.tasks
      const deleteConfirmation = confirm('Do you want to delete this task?')
      if (deleteConfirmation) {
        return tasks.splice(index, 1)
      }
    },
    /**
     * Function use for deleting of mark completed task
     */
    clearCompletedTask() {
      const completedTask = this.tasks
      this.tasks = completedTask.filter((task) => !task.completed)
    },
    /**
     * Function used for clearing all the task in the list
     */
    clearAllTasks() {
      const tasks = this.tasks
      const clearAllConfirmation = confirm('Do you want to clear all the task listed?')
      if (clearAllConfirmation) {
        while (tasks.length > 0) {
          tasks.pop()
        }
      }
    },
    /**
     * Function use for the style binding for the completed items
     * @param {number} task - get the task in the task
     * @return {Object} the style binding for the font color and background color if the task is completed.
     */
    getStyleCompleted(task) {
      return {
        backgroundColor: task.completed ? '#d8f3dc' : '#ced4da',
        color: task.completed ? '#2d6a4f' : '#1b4332'
      }
    }
  }
}
</script>
