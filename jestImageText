<template>
  <b-container>
    <h1 class="text-center my-4">Savor the flavors with incredible recipe!</h1>
    <b-row class="pb-3">
      <b-col class="py-2" v-for="btn in BUTTON" :key="btn.id"
        ><common-button :is="btn.componentName" :input="btn" :key="btn.id" @action="openModal">
          {{ btn.display.label }}
        </common-button>
      </b-col>
    </b-row>

    <b-modal
      v-model="showAddModal"
      header-bg-variant="info"
      header-text-variant="light"
      @close="clearAddModal"
      no-close-on-backdrop
      hide-footer
      centered
      title="Add Recipe"
    >
      <b-form @submit.prevent="addRecipe">
        <div v-for="item in items" :key="item.id">
          <component
            :is="item.componentName"
            :key="componentKey"
            :input="item"
            @formData="addFormData"
            >{{ item.display.label }}</component
          >
        </div>
      </b-form>
    </b-modal>

    <b-modal
      v-model="showEditModal"
      header-bg-variant="info"
      header-text-variant="light"
      no-close-on-backdrop
      hide-footer
      centered
      title="Update Recipe"
      @close="clearEditModal"
    >
      <b-form @submit.prevent="updateRecipe">
        <div v-for="item in itemsEdit" :key="item.id">
          <component
            :is="item.componentName"
            :current-value="editData[item.data?.saveAs]"
            :key="itemKey"
            :input="item"
            @formData="editFormData"
            >{{ item.display.label }}
          </component>
        </div>
      </b-form>
    </b-modal>

    <b-card v-for="recipe in recipes" :key="recipe" class="my-2" :title="recipe.name">
      <recipe-details :details="recipe"></recipe-details>
      <b-row>
        <b-col>
          <b-button class="w-100 my-2" variant="warning" @click="editRecipe(recipe)"
            >Edit Details</b-button
          >
          <b-button class="w-100 my-2" variant="danger" @click="deleteRecipe(recipe.id)"
            >Delete</b-button
          >
        </b-col>
      </b-row>
      <small class="text-muted">Posted Date: {{ recipe.date }}</small>
    </b-card>

    <b-card v-show="recipes.length === 0"
      >No Posted Recipe, Click the 'Add New Recipe' to add new recipe.
    </b-card>

    <img :src="imageUrl" alt="Uploaded Image" style="max-width: 100%; height: auto" />
  </b-container>
</template>

<script>
import { RECIPE_EDIT_PROPERTIES, RECIPE_MANAGER_PROPERTIES } from '@/common/recipe/rRecipeManager'
import { RECIPE_BUTTON } from '@/common/recipe/rButton'
import { FetchAPI } from '@/utility/apiRequest'
import CommonLabel from '@/components/common/CommonLabel.vue'
import CommonTextArea from '@/components/common/CommonTextArea.vue'
import CommonTextInput from '@/components/common/CommonTextInput.vue'
import CommonButton from '@/components/common/CommonButton.vue'
import RecipeDetails from './RecipeDetails.vue'

export default {
  components: {
    CommonTextArea,
    CommonLabel,
    CommonTextInput,
    CommonButton,
    RecipeDetails
  },
  data() {
    return {
      items: [...RECIPE_MANAGER_PROPERTIES],
      itemsEdit: [...RECIPE_EDIT_PROPERTIES],
      BUTTON: [...RECIPE_BUTTON],

      button: 'Add Recipe',
      inputData: {
        name: '',
        description: '',
        ingredient: '',
        instruction: ''
      },
      editData: {
        name: '',
        description: '',
        ingredient: '',
        instruction: ''
      },
      showAddModal: false,
      showEditModal: false,
      recipes: [],
      selectedRecipe: null,
      componentKey: 0,
      itemKey: 0,
      imageUrl: null
    }
  },
  mounted() {
    this.fetchRecipe()
    this.fetchImage()
  },
  methods: {
    /**
     * Function use for adding the data value from specific data
     * @param {Object} data - assign and get the key and value variable
     */
    addFormData(data) {
      this.inputData[data.key] = data.value
    },
    /**
     * Function use for editing the data value from specific data
     * @param {Object} data - assign and get the key and value variable
     */
    editFormData(data) {
      this.editData[data.key] = data.value
    },
    /**
     * Function use for opening the add modal
     */
    openModal() {
      this.showAddModal = true
    },
    /**
     * Function use for opening the modal for editing
     * @param {number} recipe_id -  use for referencing the seleted puppy
     */
    editRecipe(recipe_id) {
      this.showEditModal = !this.showEditModal
      this.selectedRecipe = recipe_id
      this.getRecipeDetails()
    },
    /**
     * Function use for getting the current value of the recipe
     */
    getRecipeDetails() {
      this.editData.name = this.selectedRecipe?.name
      this.editData.description = this.selectedRecipe?.description
      this.editData.ingredient = this.selectedRecipe?.ingredient
      this.editData.instruction = this.selectedRecipe?.instruction
    },
    /**
     * Function use to add new recipe to the database from the modal form
     */
    async addRecipe() {
      const inputData = this.inputData
      const validation =
        inputData.name.trim() === '' ||
        inputData.instruction.trim() === '' ||
        inputData.description.trim() === '' ||
        inputData.ingredient.trim() === ''

      if (validation) {
        alert("Can't add if blank spaces are inputted")
        return
      }

      const api = new FetchAPI()
      const response = await api.post('/api/recipe', this.inputData)
      if (response.success) {
        alert('New Recipe Added')
        this.resetInputData()
        this.fetchRecipe()
        this.showAddModal = false
      } else {
        alert('Recipe is already existing added')
      }
    },
    /**
     * Function use to display the data from the recipe_tbl
     */
    async fetchRecipe() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/recipes')
        if (response.success) {
          this.recipes = [...response.data]
        }
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Function use to delete specific recipe
     */
    async deleteRecipe(recipe_id) {
      const confirmDelete = confirm('Do you want to delete this recipe?')
      if (confirmDelete) {
        const api = new FetchAPI()
        await api.delete(`/api/delete/${recipe_id}`)
        alert('Recipe is successfully deleted')
        this.fetchRecipe()
      }
    },
    /**
     * Function use for editing specific details of recipe
     */
    async updateRecipe() {
      const editData = this.editData
      const validation =
        editData.name.trim() === '' ||
        editData.description.trim() === '' ||
        editData.ingredient.trim() === '' ||
        editData.instruction.trim() === ''
      if (validation) {
        alert("Can't update if blank spaces are inputted")
        return
      }

      try {
        const api = new FetchAPI()
        const response = await api.put(`/api/edit/${this.selectedRecipe.id}`, this.editData)
        if (response.success) {
          alert(response.message_content)
          this.fetchRecipe()
          this.resetEditForm()
          this.showEditModal = false
        } else {
          alert('Failed to Update Recipe')
        }
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Function use for getting the image
     */
    async fetchImage() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/static/images/line_chart.png', {
          responseType: 'blob'
        })
        this.imageUrl = URL.createObjectURL(response)
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Function use for resetting the form
     */
    resetInputData() {
      const inputData = this.inputData
      inputData.name = ''
      inputData.description = ''
      inputData.ingredient = ''
      inputData.instruction = ''
      this.componentKey++
    },
    /**
     * Function use for clear the modal when close
     */
    clearAddModal() {
      this.resetInputData()
    },
    /**
     * Function use for  resetting the edit form
     */
    resetEditForm() {
      const editData = this.editData
      editData.name = ''
      editData.description = ''
      editData.ingredient = ''
      editData.instruction = ''
      this.itemKey++
    },
    /**
     * Function use for  closing the edit form
     */
    clearEditModal() {
      this.resetEditForm()
    }
  }
}
</script>
