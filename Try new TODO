<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <header><h1>Keeps</h1></header>

    <div>
      <b-input-group prepend="Notes" class="mt-3">
        <b-form-input v-model="userInput" @keyup.enter="addItem"></b-form-input>

        <b-button variant="info" @click="clickAddTask" :disabled="!userInput">Add</b-button>
      </b-input-group>
    </div>

    <b-row>
      <b-col v-for="button in buttons" :key="button.id">
        <component
          class="py-3"
          :is="button.componentName"
          :key="button"
          :input="button"
          @change="newFunc"
        ></component>
      </b-col>
    </b-row>

    <div class="todo-table">
      <div class="table-header">
        <div class="table-cell">Task</div>
        <div class="table-cell">Actions</div>
      </div>
      <div class="table-body">
        <div
          class="table-row"
          v-for="(item, index) in filteredList"
          :key="index"
          :class="{ 'even-row': index % 2 === 0, completed: item.completed }"
          :style="getStyle(item)"
        >
          <div class="table-cell">
            {{ item.value }}
            <span v-if="item.tag" class="badge bg-secondary">{{ item.tag }}</span>
          </div>
          <div class="table-cell">
            <button class="btn btn-primary" @click="toggleCompleted(index)">
              {{ item.completed ? 'Undo' : 'Complete' }}
            </button>
            <button class="btn btn-info" @click="editItem(index)">Edit</button>
            <button class="btn btn-danger" @click="confirmDelete(index)">Delete</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Clear Completed Button -->
    <b-button variant="danger" @click="newFunc('clearComp')" class="mt-3">Clear Completed</b-button>
  </b-container>
</template>



-----------------------------------------------------------------------------------------------------------





import { TODOBUTTONS } from '@/common/recipe/rButtonRecipe'
import CommonButton from '@/components/common/CommonButton.vue'

export default {
  name: 'Todo',
  components: { CommonButton },

  data() {
    return {
      buttons: [...TODOBUTTONS],
      userInput: '',
      searchInput: '',
      list: []
    }
  },

  computed: {
    filteredList() {
      return this.list.filter((item) =>
        item.value.toLowerCase().includes(this.searchInput.toLowerCase())
      )
    }
  },

  methods: {
    addItem() {
      if (this.userInput.trim() !== '') {
        const newItem = {
          id: Math.random(),
          value: this.userInput.trim(),
          completed: false,
          additionalInfo: { dateAdded: new Date().toLocaleString() } // Example of an object to loop over later
        }
        this.list.push(newItem)
        this.userInput = ''
      }
    },

    // Confirm deletion of a task
    confirmDelete(index) {
      const deleteConfirmation = confirm('Are you sure you want to delete this task?')
      if (deleteConfirmation) {
        this.deleteItem(index)
      }
    },

    deleteItem(index) {
      this.list.splice(index, 1)
    },

    editItem(index) {
      const editedTodo = prompt('Edit the todo:', this.list[index].value)
      if (editedTodo !== null && editedTodo.trim() !== '') {
        this.list[index].value = editedTodo.trim()
      }
    },

    toggleCompleted(index) {
      this.list[index].completed = !this.list[index].completed

      // Using .map() to tag completed items
      this.list = this.list.map(item => {
        if (item.completed) {
          item.tag = 'Completed'
        } else {
          delete item.tag
        }
        return item
      })
    },

    deleteAll() {
      while (this.list.length > 0) {
        this.list.pop()
      }
    },

    // Looping over an array (buttons)
    loopButtons() {
      this.buttons.forEach(button => {
        console.log(`Button component: ${button.componentName}`)
      })
    },

    // Looping over an object (example: additionalInfo of a task)
    logAdditionalInfo(index) {
      const task = this.list[index]
      for (const key in task.additionalInfo) {
        console.log(`${key}: ${task.additionalInfo[key]}`)
      }
    },

    initializeData() {
      return this.userInput === ''
    },

    clickAddTask() {
      if (this.initializeData()) {
        alert('Please Input a Note')
      } else {
        this.addItem()
      }
    },

    // Clear completed tasks method
    clearCompleted() {
      this.list = this.list.filter(item => !item.completed)
    },

    newFunc(action) {
      if (this.list.length === 0 && action === 'clearAll') {
        alert('Input first before Deleting')
      } else if (this.list.length > 0 && action === 'clearAll') {
        const remove = confirm('Are you sure you want to Clear All?')
        if (remove) this.deleteAll()
      } else if (action === 'clearComp') {
        this.clearCompleted()
      }
    },

    // Apply dynamic style binding based on task properties
    getStyle(item) {
      return {
        color: item.completed ? '#888' : '#000',
        backgroundColor: item.completed ? '#f0f0f0' : '#fff'
      }
    }
  }
}







-----------------------------------------------------------------------------


















