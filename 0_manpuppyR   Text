<template>
  <b-container>
    <b-card title="Add Puppy for Adoption" class="mt-5">
      <b-form @submit.prevent="addPuppy">
        <b-form-group label="Puppy Name" label-for="puppy-name">
          <b-form-input
            id="puppy-name"
            v-model="form.name"
            placeholder="Enter Puppy Name"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Puppy Birthdate" label-for="puppy-birthdate">
          <b-form-input
            id="puppy-birthdate"
            v-model="form.birthdate"
            type="date"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Breed" label-for="puppy-breed">
          <b-form-input
            id="puppy-breed"
            v-model="form.breed"
            placeholder="Enter Puppy Breed"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Gender" label-for="puppy-gender">
          <b-form-select
            id="puppy-gender"
            v-model="form.gender"
            :options="[
              { value: null, text: 'Select the Gender', disabled: true },
              { value: 1, text: 'Female' },
              { value: 2, text: 'Male' }
            ]"
            required
          ></b-form-select>
        </b-form-group>

        <b-form-group label="Fee" label-for="puppy-fee">
          <b-form-input
            id="puppy-fee"
            type="number"
            v-model="form.fee"
            placeholder="Enter Puppy Fee"
            required
          ></b-form-input>
        </b-form-group>

        <b-button type="submit" variant="success">Add Puppy</b-button>
      </b-form>
    </b-card>

    <b-modal v-model="adoptionForm">
      <b-form @submit.prevent="addOwner">
        <b-form-group label="Name" label-for="owner-name">
          <b-form-input
            id="owner-name"
            v-model="formOwner.name"
            placeholder="Enter Your Name"
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Email" label-for="owner-email">
          <b-form-input
            id="owner-email"
            v-model="formOwner.email"
            placeholder="Enter Your Email"
            required
          ></b-form-input>
        </b-form-group>

        <b-form-group label="Address" label-for="owner-address">
          <b-form-input
            id="owner-address"
            v-model="formOwner.address"
            placeholder="Enter Your Address"
            required
          ></b-form-input>
        </b-form-group>

        <b-button type="submit" variant="success">Apply for Adoption</b-button>
      </b-form>
    </b-modal>

    <b-card title="Puppies for Adoption" class="mt-5">
      <b-table :items="puppies" :fields="fields" head-variant="success" class="text-center">
        <template #cell(gender)="data">
          <span>{{ data.item.gender === 1 ? 'Male' : 'Female' }}</span>
        </template>
        <!-- <template #cell(adoptedBy)>
          <b-form-checkbox v-model="ownerDetails">See Owner details </b-form-checkbox>
        </template> -->
        <template #cell(action)="data">
          <b-button-group>
            <b-button variant="success" @click="adoptionForm = !adoptionForm">Adopt</b-button>
            <b-button variant="warning" @click="deletePuppies(data.item)">Delete</b-button>
          </b-button-group>
        </template>
      </b-table>
    </b-card>
  </b-container>
</template>

<script>
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'PuppyCompany',
  data() {
    return {
      form: {
        name: '',
        birthdate: '',
        breed: '',
        gender: null,
        fee: ''
      },
      formOwner: {
        name: '',
        email: '',
        address: ''
      },
      puppies: [],
      selectedPuppy: null,
      fields: [
        { key: 'name', label: 'Name' },
        { key: 'birthdate', label: 'Birthdate' },
        { key: 'breed', label: 'Breed' },
        { key: 'gender', label: 'Gender' },
        { key: 'fee', label: 'Adoption Fee' },
        { key: 'adoptedBy', label: 'Adopted by' },
        { key: 'action', label: 'Action' }
      ],
      adoptionForm: false
    }
  },
  mounted() {
    this.fetchPuppies()
  },
  methods: {
    /**
     *
     */
    async addPuppy() {
      try {
        const api = new FetchAPI()
        const response = await api.post('/api/puppy', this.form)
        console.log(response)
        if (response.success) {
          this.resetForm()
          this.fetchPuppies()
        } else {
          alert('Failed to add puppy.')
        }
      } catch (err) {
        console.error(err)
      }
    },
    /**
     *
     */
    async addOwner() {
      try {
        const api = new FetchAPI()
        const response = await api.post('/api/owner', this.formOwner)
        if (response.success) {
          alert('Owner added successfully!')
        } else {
          alert('Failed to add owner.')
        }
      } catch (err) {
        console.error(err)
      }
    },
    /**
     *
     */
    async fetchPuppies() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/puppies')
        console.log(response)
        if (response.success) {
          this.puppies = [...response.data]
        } else {
          alert('Failed to fetch puppies.')
        }
        alert(response.message_response)
      } catch (err) {
        console.error(err)
        alert('An error occurred while fetching puppies.')
      }
    },
    async deletePuppies(puppy) {
      try {
        const api = new FetchAPI()
        const response = await api.delete(`/api/delete-puppy/${puppy.id}`)
        console.log(response)
        if (response.data.success) {
          this.fetchPuppies()
        } else {
          alert('Failed to delete puppies.')
        }
      } catch (err) {
        console.error(err)
        alert('An error occurred while deleting puppy.')
      }
    },
    /**
     *
     */
    resetForm() {
      const form = this.form
      form.name = ''
      form.birthdate = ''
      form.breed = ''
      form.gender = null
      form.fee = ''
    },
    /**
     *
     */
    resetFormOwner() {
      const formOwner = this.formOwner
      formOwner.name = ''
      formOwner.email = ''
      formOwner.address = ''
    }
  }
}
</script>
--------------------------------------------
from flask import Blueprint, request
from src.setup_db_example.database import db
from src.setup_db_example.models.m_puppy import PuppyDb
import traceback




puppy_db_router = Blueprint("a_puppy", __name__)


@puppy_db_router.route("/api/puppies", methods=["GET"])
def get_puppies():
    """Get all the puppies

    Returns:
        dict: return the details for the puppy
    """    
    query = PuppyDb.query.all()
    puppy_lists = []
    for data in query:
            formDate = data.puppy_birthdate.strftime("%b %d %Y")
            puppy_dict = {
                "id": data.puppy_id,
                "name": data.puppy_name,
                "birthdate":  formDate,
                "breed": data.puppy_breed,
                "gender": data.puppy_gender,
                "fee": data.puppy_fee
                }
            
            puppy_lists.append(puppy_dict)    
    return {
            "success": True,
            "message_response": "PUPPY FETCHED SUCCESSFULLY",
            "message_content": "Puppy fetched successfully",
            "data": puppy_lists
        }, 200



    
@puppy_db_router.route("/api/puppy", methods=["POST"])
def add_puppy():
    """ Add new puppy

    Returns:
        _type_: _description_
    """    
    req = request.json["params"]

    required_fields = ["name", "birthdate", "breed", "gender", "fee"]

    if not req or not all(field in req and req[field] for field in required_fields):
        return {
            "success": False,
            "message_response": "Validation Failed",
            "message_content": "Missing or empty required fields"
        }, 400

    try: 
        name = req['name']
        birthdate = req['birthdate']
        breed = req['breed']
        gender= req['gender']
        fee =  req ['fee']
        new_puppy_data = PuppyDb(puppy_name = name, puppy_birthdate = birthdate, puppy_breed = breed, puppy_gender = gender, puppy_fee = fee)
        db.session.add(new_puppy_data)
        db.session.commit()
        return{
            "success": True,
            "message_response": "PUPPY SUCCESSFULLY ADDED",
            "message_content": "Puppy added"
        }, 200
    except Exception as e:
        print(traceback.format_exc())
        return {
            "success": False,
            "message_response": "PUPPY FAILED TO ADD",
            "message_content": "Failed to add"
        }, 500

@puppy_db_router.route("/api/delete-puppy/<int:puppy_id>", methods=["DELETE"])
def delete_puppy(puppy_id):
    try: 
        if PuppyDb.query.filter(PuppyDb.puppy_id == str(puppy_id)).delete():
            db.session.commit()
            return {
                "success": True,
                "message_response": "PUPPY SUCCESSFULLY DELETED",
                "message_content": "Puppy deleted"
            }, 200
    except Exception as e:
        print(traceback.format_exc())
        return {
                "success": False,
                "message_response": "PUPPY FAILED TO DELETE",
                "message_content": "Failed to delete"
        }, 500
--------------------
from flask import Blueprint, request
from src.setup_db_example.models.m_owner import OwnerDb
from src.setup_db_example.database import db
import traceback

owner_db_router = Blueprint("owner_api", __name__)

@owner_db_router.route("/api/get-sample", methods=["GET"])
def sample_read():

    return {
        "message": "sample",
    }

@owner_db_router.route("/api/owner", methods=["POST"])
def add_owner():
    req = request.json["params"]

    required_fields = ["name", "email", "address"]

    if not req or not all(field in req and req[field] for field in required_fields):
        return {
            "success": False,
            "message_response": "Validation Failed",
            "message_content": "Missing or empty required fields"
        }, 400

    try: 
        name = req['name']
        email = req['email']
        address =  req ['address']
        new_owner_data = OwnerDb(owner_name = name, owner_email = email, owner_address = address)
        db.session.add(new_owner_data)
        db.session.commit()
        return{
            "success": True,
            "message_response": "Owner SUCCESSFULLY ADDED",
            "message_content": "Owner added"
        }, 200
    except Exception as e:
        print(traceback.format_exc())
        return {
            "success": False,
            "message_response": "OWNER FAILED TO ADD",
            "message_content": "Failed to add"
        }, 500
------------------------
from flask import Blueprint, request
from src.setup_db_example.models.m_adoption import AdoptionDb
from src.setup_db_example.models.m_puppy import PuppyDb
import traceback


adoption_db_router = Blueprint("a_adoption", __name__)

@adoption_db_router.route("/api/get-sample", methods=["GET"])
def sample_read():

    return {
        "message": "sample",
    }

-------------
from src.setup_db_example.database import db

class AdoptionDb(db.Model):
    """Represents a model for storing the data in adoption_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    
    Returns:
        list: adoption_tbl
    """
    

    __tablename__ = "adoption_tbl"

    adoption_id = db.Column(db.Integer, primary_key=True)
    adoption_date = db.Column(db.Date, nullable=True)
    adopted_by = db.Column(db.Integer, db.ForeignKey("owner_tbl.owner_id"), nullable=True)
    puppy_id = db.Column(db.Integer, db.ForeignKey("puppy_tbl.puppy_id"), nullable=False)

----------------------------
from src.setup_db_example.database import db
from src.setup_db_example.models.m_adoption import AdoptionDb

class OwnerDb(db.Model):
    """Represents a model for storing the data in owner_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    
    Returns:
        list: owner_tbl
    """


    __tablename__ = "owner_tbl"
	
    owner_id = db.Column(db.Integer, primary_key=True)
    owner_name = db.Column(db.String(32), nullable=False)
    owner_email = db.Column(db.String(32), nullable=False, unique=True)
    owner_address = db.Column(db.String(64), nullable=False)

    adoption_owner = db.relationship('AdoptionDb', backref='owner')
-------------------
from src.setup_db_example.database import db
from src.setup_db_example.models.m_adoption import AdoptionDb

class PuppyDb(db.Model):
    """Represents a model for storing the data in puppy_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    
    Returns:
        list: puppy_tbl
    """
    

    __tablename__ = "puppy_tbl"

    puppy_id = db.Column(db.Integer, primary_key=True)
    puppy_name = db.Column(db.String(32), nullable=False)
    puppy_birthdate = db.Column(db.Date, nullable=False)
    puppy_breed = db.Column(db.String(32), nullable=False)
    puppy_gender= db.Column(db.Integer, nullable=False)
    puppy_fee = db.Column(db.Float(5), nullable=False)


    adoption_puppy = db.relationship('AdoptionDb', backref='puppies')
------
from src.setup_db_example.models.m_adoption import AdoptionDb
from marshmallow_sqlalchemy import SQLAlchemySchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()

class AdoptionSchema(SQLAlchemySchema):
    """
        This class positions schema with the corresponding db table model
    """ 

    class Meta:
        """
            Meta Class
        """   
        model = AdoptionDb
        load_instance = True
----------
from src.setup_db_example.models.m_owner import OwnerDb
from src.setup_db_example.models.m_adoption import AdoptionDb
from marshmallow_sqlalchemy import SQLAlchemySchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()


class OwnerSchema(SQLAlchemySchema):
    """
        This class positions schema with the corresponding db table model
    """    

    class Meta:
        """
            Meta Class
        """    
        model = OwnerDb
        load_instance = True

    ma.Nested(AdoptionDb)
------
from src.setup_db_example.models.m_puppy import PuppyDb
from src.setup_db_example.models.m_adoption import AdoptionDb
from marshmallow_sqlalchemy import SQLAlchemySchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()

class PuppySchema(SQLAlchemySchema):
    """
        This class positions schema with the corresponding db table model
    """ 

    class Meta:
        """
            Meta Class
        """   
        model = PuppyDb
        load_instance = True

    ma.Nested(AdoptionDb)
